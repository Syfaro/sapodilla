name: CI

on:
  push:

env:
  RUST_NIGHTLY_VERSION: "nightly-2025-09-10"

jobs:
  check:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, wasm32-unknown-unknown]
        features: [none]
        include:
          - target: wasm32-unknown-unknown
            features: web-workers

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare Rust
        run: "./scripts/prepare-${{ matrix.target }}_${{ matrix.features }}.sh"

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"

      - name: Run clippy with default features
        if: ${{ matrix.features == 'none' }}
        run: |
          cargo clippy --all-targets --target ${{ matrix.target }}

      - name: Run clippy with custom features
        if: ${{ matrix.features != 'none' }}
        run: |
          cargo clippy --all-targets --target ${{ matrix.target }} --features ${{ matrix.features }}

  test:
    name: Run tests
    runs-on: ubuntu-latest

    env:
      RUSTFLAGS: "-Dwarnings"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"

      - name: Check format
        run: cargo fmt --check

      - name: Run tests
        run: cargo test

  publish:
    name: Publish to Cloudflare Pages
    runs-on: ubuntu-latest
    needs: [check, test]
    permissions:
      contents: read
      deployments: write

    env:
      target: "wasm32-unknown-unknown"
      features: "web-workers"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare Rust
        run: "./scripts/prepare-${{ env.target }}_${{ env.features }}.sh"

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: "true"

      - name: Install trunk
        run: cargo install --locked trunk

      - name: Build dist
        run: "./scripts/build-${{ env.target }}_${{ env.features }}.sh"

      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=sapodilla
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
